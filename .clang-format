---
Language: Cpp
BasedOnStyle: Google
ColumnLimit: 175  # Short column limits are dated and limiting in C++ when trying to be explicit. Use common sense.
BreakBeforeBraces: Custom  # Like Stroustrup, but don't wrap after function calls
BraceWrapping:
  BeforeCatch: true
  BeforeElse: true
Standard: Auto  # (Non-Deviation) Detect standard version to avoid issues in legacy code

# rules that cause more substantial source changes
UseCRLF: false  # (Non-Deviation) Source Files should always use LF line endings for portability!
UseTab: Never  # (Non-Deviation) Stick to a single whitespace style within a file!
DeriveLineEnding: true   # (Non-Deviation) Don't force LF line endings if the entire file is CRLF
DerivePointerAlignment: false  # (Non-Deviation) Obey style guide since this is not a breaking change
ReflowComments: true  # (Non-Deviation) Obey style guide since this is not a breaking change
FixNamespaceComments: true

### empty lines and space related style
MaxEmptyLinesToKeep: 2
EmptyLineAfterAccessModifier: Leave
EmptyLineBeforeAccessModifier: LogicalBlock

### Indention related rules
IndentWidth: 4  # a compromise between 2 and 8
AccessModifierOffset: -4  # Access modifiers with no indent over parent class. LLVM style.
NamespaceIndentation: All  # Indent namespaces to make hierarchy more explicit
IndentPPDirectives: None  # (Non-Deviation)
ConstructorInitializerIndentWidth: 4  # (Non-Deviation)
ContinuationIndentWidth: 4  # (Non-Deviation)

### Code Alignment rules
PointerAlignment: Left  # (Non-Deviation) Pointer is part of the type, so keep with the type-name
AlignTrailingComments: true  # Documentation comments for many assignments in a row to line up

### Rules to allow or ban compressing code to one line
AllowShortBlocksOnASingleLine: Empty  # allow empty blocks on one line for common polling patterns in blocking APIs
AllowShortCaseLabelsOnASingleLine: false  # (Non-Deviation) Disable formatting if necessary for metaprogramming
AllowShortFunctionsOnASingleLine: Empty  # Only empty functions. Single line functions with any code can make debugging and trace difficult.
AllowShortLambdasOnASingleLine: All  # (Non-Deviation) lambdas are a special case since they are often assigned to variables
AllowShortIfStatementsOnASingleLine: Never  # Distinct lines are better for trace and debug
AllowShortLoopsOnASingleLine: false  # Distinct lines are better for trace and debug

### Heuristics to tell clang-format where to break long lines
PenaltyBreakAssignment: 1000
PenaltyBreakBeforeFirstCallParameter: 1
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 500
PenaltyReturnTypeOnItsOwnLine: 200

### Rules related to whitespace within statements
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: false
SpaceBeforeAssignmentOperators: true
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeRangeBasedForLoopColon: true
SpaceInEmptyBlock: false
SpaceInEmptyParentheses: false
SpacesBeforeTrailingComments: 2
SpacesInAngles:  false
SpacesInConditionalStatement: false
SpacesInContainerLiterals: true
SpacesInCStyleCastParentheses: false
SpacesInParentheses: false
SpacesInSquareBrackets: false
SpaceBeforeSquareBrackets: false
